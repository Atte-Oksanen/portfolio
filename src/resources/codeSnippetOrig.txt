public class InvoiceInspector {

   Invoice[] invoices = null;
   Payment[] payments = null;

   List<Invoice> toCollect = new ArrayList<>();

   public void readInvoicesAndPayments(String invoicesFile, String paymentsFile) throws IOException {
      BufferedReader invoiceReader = new BufferedReader(new InputStreamReader(new FileInputStream(invoicesFile), "UTF-8"));
      String line = null;
      line = invoiceReader.readLine();
      int itemCount = 0;
      if (null != line && line.length() > 0) {
         itemCount = Integer.parseInt(line);
         invoices = new Invoice[itemCount];
      } else {
         invoiceReader.close();
         throw new IOException("Could not read the invoice file");
      }
      itemCount = 0;
      while ((line = invoiceReader.readLine()) != null && line.length() > 0) {
         String[] items = line.split(",");
         invoices[itemCount++] = new Invoice(Integer.parseInt(items[0]), Integer.parseInt(items[1]), Long.parseLong(items[2]));
      }
      invoiceReader.close();
      BufferedReader paymentsReader = new BufferedReader(new InputStreamReader(new FileInputStream(paymentsFile), "UTF-8"));
      line = paymentsReader.readLine();
      itemCount = 0;
      if (null != line && line.length() > 0) {
         itemCount = Integer.parseInt(line);
         payments = new Payment[itemCount];
      } else {
         paymentsReader.close();
         throw new IOException("Could not read the invoice file");
      }
      itemCount = 0;
      while ((line = paymentsReader.readLine()) != null && line.length() > 0) {
         String[] items = line.split(",");
         payments[itemCount++] = new Payment(Integer.parseInt(items[0]), Integer.parseInt(items[1]));
      }
      paymentsReader.close();
   }

  
   public void handleInvoicesAndPaymentsSlow() throws IOException {
      for (int counter = 0; counter < invoices.length; counter++) {
         Invoice invoice = invoices[counter];
         boolean noPaymentForInvoiceFound = true;
         Calendar dueDate = Calendar.getInstance();
         dueDate.set(Calendar.MONTH, dueDate.get(Calendar.MONTH)+1);
         long dueDateValue = dueDate.getTime().getTime();
         for (int paymentCounter = 0; paymentCounter < payments.length; paymentCounter++) {
            Payment payment = payments[paymentCounter];
            if (invoice.number.compareTo(payment.number) == 0) {
               noPaymentForInvoiceFound = false;
               if (invoice.sum.compareTo(payment.sum) > 0) {
                  toCollect.add(new Invoice(invoice.number, invoice.sum - payment.sum, dueDateValue));
                  break;
               }
            }
         }
         if (noPaymentForInvoiceFound) {
            toCollect.add(invoice);
         }
      }
      Invoice[] array = new Invoice[toCollect.size()];
      int index = 0;
      for (Invoice invoice : toCollect) {
         array[index++] = invoice;
      }
      Algorithms.sort(array);
      toCollect.clear();
      for (Invoice invoice : array) {
         toCollect.add(invoice);
      }
   }

   public void saveNewInvoices(String outputFile) throws IOException {
      BufferedWriter toCollectWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), "UTF-8"));
      for (Invoice invoice : toCollect) {
         toCollectWriter.write(invoice.number.toString() + "," + invoice.sum.toString() + "," + invoice.dueDate.getTime());
         toCollectWriter.newLine();
      }
      toCollectWriter.close();
   }

   public void handleInvoicesAndPaymentsFast() {

      Calendar dueDate = Calendar.getInstance();
      dueDate.set(Calendar.MONTH, dueDate.get(Calendar.MONTH)+1);
      long dueDateValue = dueDate.getTime().getTime();

      Algorithms.fastSort(invoices);
      Algorithms.fastSort(payments);
      Integer[] paymentNums = new Integer[payments.length];
      for(int n = 0; n < paymentNums.length; n++){
         paymentNums[n] = payments[n].number;
      }

      for(int n = 0; n < invoices.length; n++){
         Invoice temp = invoices[n];
         int index = Algorithms.binarySearch(temp.number , paymentNums, 0, payments.length - 1);
         if(index == -1){
            toCollect.add(temp);
         }   
         else if(temp.sum.compareTo(payments[index].sum) > 0){
            toCollect.add(new Invoice(temp.number, temp.sum - payments[index].sum, dueDateValue));
         }
         
      }
   }

}
